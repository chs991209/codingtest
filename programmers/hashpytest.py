# 동명이인이 없는 참가자가 완주하지 못한 case
# 동명이인 중 한 명이 완주하지 못한 case

# participant, completion>>>
# Iterable, Mutable하며 getitem, iter, len, indexing, add가 가능하다. 중복 가능
# len(participant) = len(completion) + 1
# 원소 중 서로 다른 원소(string)은 단 하나이다.
# set, tuple, dict은 중복 불가/불가변이므로 사용 불가
import timeit


# print(dir(Counter(p1)))


def solution_case1(participant, completion):
    # The Heaviest algorithm
    # p_countdict = Counter(participant)
    # c_countdict = Counter(completion)
    # incomplete_dict = p_countdict - c_countdict
    # incomplete_name = list(incomplete_dict)[0]
    # # if dict(p_countdict)[incomplete_name] == 2:
    # if participant.count(incomplete_name) == 2:
    #     return "{}은 참가자 목록에는 동명이인으로 있지만 한 명은 마라톤을 완주하지 못했습니다".format(incomplete_name)
    #
    # else:
    #     return "{}은 마라톤을 완주하지 못했습니다".format(incomplete_name)
    # -----------------------------------------------

    submit = [
        j for j in participant
        if participant.count(j) - completion.count(j) == 1
    ]
    if participant.count(submit) == 1:
        return "{}은 마라톤을 완주하지 못했습니다".format(submit)
    else:
        return "{}은 참가자 목록에는 동명이인으로 있지만 한 명은 마라톤을 완주하지 못했습니다".format(submit)
    # ---------------------------------------------------------------
    # submit = [j[0] for j in participant if participant.count(j) != completion.count(j)]
    # if participant.count(submit) == 2:
    #     return "{}은 참가자 목록에는 동명이인으로 있지만 한 명은 마라톤을 완주하지 못했습니다".format(submit)
    # else:
    #     return "{}은 마라톤을 완주하지 못했습니다".format(submit)
    # ------------------------------------------------
    # for k in set(participant):
    #     if participant.count(k) != completion.count(k):
    #         if participant.count(k) == 2:
    #             return "{}은 참가자 목록에는 동명이인으로 있지만 한 명은 마라톤을 완주하지 못했습니다".format(k)
    #         if participant.count(k) == 1:
    #             return "{}은 마라톤을 완주하지 못했습니다".format(k)


p1 = [
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
]
c1 = [
    "Marina",
    "Josipa",
    "Nikola",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
]

print(timeit.timeit("solution_case1(p1, c1)", number=1000, globals=globals()))

# print(solution_case1(p1, c1))


print()
print()


# def solution1(part, completion):
#     for p in part:
#         if part.count(p) == 2 and completion.count(p) == 1:
#             return "{}은 참가자 목록에는 동명이인으로 있지만 한 명은 마라톤을 완주하지 못했습니다".format(p)
#         if p in part and p not in completion:
#             return "{}은 마라톤을 완주하지 못했습니다".format(p)
#
#     return completion
#
#
# a = ["Marina", "Josipa", "Nikola", "Vinko", "Filipa"]
# b = ["Josipa", "Filipa", "Marina", "Nikola"]
#
# # print(solution1(a, b))
# print(timeit.timeit('solution1(a, b)', number=1000, globals=globals()))


def solution1(part, completion):
    for p in part:
        if part.count(p) - completion.count(p) == 1:
            if part.count(p) >= 2:
                return "{}은 참가자 목록에는 동명이인으로 있지만 한 명은 마라톤을 완주하지 못했습니다".format(p)
            else:
                return "{}은 마라톤을 완주하지 못했습니다".format(p)


a = [
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
]
b = [
    "Marina",
    "Josipa",
    "Nikola",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
]


# print(solution1(a, b))
print(timeit.timeit("solution1(a, b)", number=1000, globals=globals()))


def solution_eun(participant, completion):
    for p in participant:
        flag = 0
        for c in completion:  # O(n)
            if p == c:
                flag = 1
                completion.remove(c)
                break
        if not flag:
            if participant.count(p) >= 2:
                return "{}은 참가자 목록에는 동명이인으로 있지만 한 명은 마라톤을 완주하지 못했습니다".format(p)
            else:
                return "{}은 마라톤을 완주하지 못했습니다".format(p)


p2 = [
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
]
c2 = [
    "Marina",
    "Josipa",
    "Nikola",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
    "Marina",
    "Josipa",
    "Nikola",
    "Vinko",
    "Filipa",
]

print(timeit.timeit("solution_eun(p2, c2)", number=1000, globals=globals()))
